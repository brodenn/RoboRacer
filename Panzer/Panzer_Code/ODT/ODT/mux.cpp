#include <Wire.h>               // I2C-kommunikation
#include "mux.h"                // Egna definitioner och typer (t.ex. MUX_ADDR)
#include "vl53l4cd_class.h"     // Bibliotek f√∂r VL53L4CD-sensorer
#include "evade.h"

// Tv√• sensorer anslutna via multiplexer ‚Äì kanal 0 (v√§nster) och kanal 3 (h√∂ger)
VL53L4CD vl53_left(&Wire, -1);   // V√§nster sensor
VL53L4CD vl53_right(&Wire, -1);  // H√∂ger sensor

// Global array f√∂r sparade m√§tv√§rden [0]=v√§nster, [1]=h√∂ger
uint16_t vl53Distances[2] = {0, 0};

void selectMuxChannel(uint8_t channel) {
  // Aktiverar en specifik kanal p√• I2C-multiplexern
  Wire.beginTransmission(MUX_ADDR);   // Startar I2C-kommunikation med mux
  Wire.write(1 << channel);           // S√§tter bit som motsvarar vald kanal
  Wire.endTransmission();             // Avslutar √∂verf√∂ring
}

void initVL53Sensors() {
  // === Initiera VL53 v√§nster (kanal 0) ===
  selectMuxChannel(0);                         // V√§lj kanal 0 p√• mux
  vl53_left.VL53L4CD_Off();                    // Nollst√§ll sensorn
  vl53_left.VL53L4CD_On();                     // Starta sensorn
  if (vl53_left.InitSensor() == 0) {           // Initiering lyckades
    vl53_left.VL53L4CD_SetRangeTiming(15, 0);  // Snabb m√§tning (15 ms)
    vl53_left.VL53L4CD_StartRanging();         // Starta kontinuerlig m√§tning
    Serial.println("‚úÖ VL53 v√§nster initierad");
  }

  // === Initiera VL53 h√∂ger (kanal 3) ===
  selectMuxChannel(3);                         // V√§lj kanal 3 p√• mux
  vl53_right.VL53L4CD_Off();                   // Nollst√§ll sensorn
  vl53_right.VL53L4CD_On();                    // Starta sensorn
  if (vl53_right.InitSensor() == 0) {          // Initiering lyckades
    vl53_right.VL53L4CD_SetRangeTiming(15, 0); // Snabb m√§tning
    vl53_right.VL53L4CD_StartRanging();        // Starta kontinuerlig m√§tning
    Serial.println("‚úÖ VL53 h√∂ger initierad");
  }
}

MuxStatus checkVL53Obstacles() {
  // === Tr√∂skelv√§rden f√∂r avst√•nd och signalstyrka ===
  const uint16_t CRIT_LEFT  = VL53_CRIT_LEFT;    // t.ex. 100 mm
  const uint16_t CRIT_RIGHT = VL53_CRIT_RIGHT;   // t.ex. 100 mm
  const uint16_t SIGNAL_MIN = 2;                // Minsta godk√§nda signalstyrka (kcps)

  VL53L4CD_Result_t result;  // Struktur f√∂r m√§tresultat
  uint8_t ready = 0;         // Flagga f√∂r datatillg√§nglighet

  // === L√§s v√§nster sensor ===
  selectMuxChannel(0);                                 // V√§lj kanal 0 (v√§nster)
  vl53_left.VL53L4CD_CheckForDataReady(&ready);        // Kontrollera om data √§r redo
  if (ready) {
    vl53_left.VL53L4CD_GetResult(&result);             // L√§s m√§tresultat
    vl53_left.VL53L4CD_ClearInterrupt();               // Rensa avbrott

    // Skriv ut debug-info
    Serial.print("üìè VL53 V: ");
    Serial.print(result.distance_mm);
    Serial.print(" mm | Signal: ");
    Serial.println(result.signal_per_spad_kcps);

    // Kontrollera signalstyrka och spara avst√•nd
    if (result.signal_per_spad_kcps >= SIGNAL_MIN) {
      vl53Distances[0] = result.distance_mm;
    } else {
      Serial.println("‚ö†Ô∏è VL53 v√§nster: signal ");
      Serial.println(SIGNAL_MIN);
      Serial.println(" ‚Üí m√§tning ignoreras");
      vl53Distances[0] = INVALID_DISTANCE;  // Ignorera ogiltig m√§tning
    }

    // Kontrollera om avst√•ndet √§r kritiskt
    if (vl53Distances[0] > 0 && vl53Distances[0] < CRIT_LEFT) {
      return MUX_CRITICAL_LEFT;
    }
  }

  // === L√§s h√∂ger sensor ===
  ready = 0;                                           // √Öterst√§ll ready-flagga
  selectMuxChannel(3);                                // V√§lj kanal 3 (h√∂ger)
  vl53_right.VL53L4CD_CheckForDataReady(&ready);
  if (ready) {
    vl53_right.VL53L4CD_GetResult(&result);
    vl53_right.VL53L4CD_ClearInterrupt();

    Serial.print("üìè VL53 H: ");
    Serial.print(result.distance_mm);
    Serial.print(" mm | Signal: ");
    Serial.println(result.signal_per_spad_kcps);

    if (result.signal_per_spad_kcps >= SIGNAL_MIN) {
      vl53Distances[1] = result.distance_mm;
    } else {
      Serial.println("‚ö†Ô∏è VL53 h√∂ger: signal < ");
      Serial.println(SIGNAL_MIN);
      Serial.println(" ‚Üí m√§tning ignoreras");
      vl53Distances[1] = INVALID_DISTANCE;
    }

    if (vl53Distances[1] > 0 && vl53Distances[1] < CRIT_RIGHT) {
      return MUX_CRITICAL_RIGHT;
    }
  }

  return MUX_CLEAR;  // Inget kritiskt hinder detekterat
}
